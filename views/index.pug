extends layout

block layout-content
  div.View.WelcomeView
    h1.Banner Mobilenet
    div.Message
      div.Title
        h3 Classify an Image
      .form-group
        label(for='photo') Photo 
        input#file(type='file',name='photo', accept='image/*')
      .form-group
        label Model Type:
        input(type='radio', name='model_type', id='mobilenetv2', value='mobilenetv2', checked=true)
        label(for='mobilenetv2') MobileNetv2
        input(type='radio', name='model_type', id='tiny', value='tiny')
        label(for='tiny') Tiny Model - Person Classifier
      .form-group
        label Variant Type:
        input(type='radio', name='variant_type', id='baseline', value='baseline', checked=true)
        label(for='baseline') Baseline
        input(type='radio', name='variant_type', id='reimann', value='reimann')
        label(for='reimann') Reimann
        input(type='radio', name='variant_type', id='lorenz_int8', value='lorenz_int8')
        label(for='lorenz_int8') Lorenz Int8
        input(type='radio', name='variant_type', id='lorenz_int16', value='lorenz_int16')
        label(for='lorenz_int16') Lorenz Int16
      span.Details Upload an image to classify using MobileNetv2
      div.text
        p#label()
        p#loadtime()
        p#inferencetime()
    div.NavButtons
      button.NavButton(onclick="predict()") Predict

  script.
    async function predict() {
      const imageURL = document.getElementById("file").files[0];
      
      const modelButtons = document.getElementsByName('model_type');
      var modelType = 'mobilenetv2';
      for (var i = 0; i < modelButtons.length; i++) {
        if (modelButtons[i].checked) {
          modelType = modelButtons[i].value;
        }
      }

      const variantButtons = document.getElementsByName('variant_type');
      var variantType = 'baseline';
      for (var i = 0; i < variantButtons.length; i++) {
        if (variantButtons[i].checked) {
          variantType = variantButtons[i].value;
        }
      }

      const image = await loadImage(imageURL);
      var xhr = new XMLHttpRequest();
      xhr.open("POST", "/predict/", true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.onload = function () {
        if (xhr.readyState === xhr.DONE) {
          if (xhr.status === 200) {
            var response = JSON.parse(xhr.responseText)
            document.getElementById("label").innerHTML = "Label: "+ response.label;
            document.getElementById("loadtime").innerHTML = "Load Time: "+ response.loadtime+"ms";
            document.getElementById("inferencetime").innerHTML = "Inference Time: "+ response.inftime+"ms";
          }
        }
      };

      //- for (int i=0;i<100;i++) {
        
      //- }
      xhr.send(JSON.stringify({"image": image.src, "modelType": modelType, "variantType": variantType}));
    }

    async function loadImage(imgFile) {
      return new Promise((resolve, reject) => {
        var reader = new FileReader();
        reader.onload = async e => {
          const image = new Image();
          image.src = e.target.result;
          //- image.setAttribute("crossOrigin", "anonymous");
          image.onload = () => resolve(image);
          image.onerror = reject;
        }
        reader.onerror = reject;
        reader.readAsDataURL(imgFile);
      });
    }