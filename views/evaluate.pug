extends layout

block layout-content
  div.View.WelcomeView
    h1.Banner LEIP Evaluate
    div.Message(style="float: left")
      div.Title
        h3 Evaluate Model Performance
      div.form(style="float: left")
        .form-group
          label(for='sample_index') Index
          input#file(type='file',name='sample_index' webkitdirectory multiple)
        .form-group
          label(for='model_type') Model Types 
                  select(name='model_type', id='')
                      each mtype in modelTypes
                          option=mtype
        .form-group
          label(for='variant_type') Variant Types 
                  select(name='variant_type', id='')
                      each vtype in variantTypes
                          option=vtype
        span.Details Upload a list of images to classify using MobileNetv2
      div#Output.table
        p#loadtime()
        p#accuracy()
        p#avg_inf_speed()
        p#inference_ps()
    div.NavButtons
      button.NavButton(onclick="leip_eval()") Evaluate

  script.
    async function leip_eval() {
      const files = document.getElementById("file").files;
      const parsedFiles = await parseFiles(files)
      const modelType = getDropDownValue('model_type', 'mobilenetv2')
      const variantType = getDropDownValue('variant_type', 'fp32')
      var xhr = new XMLHttpRequest();
      xhr.open("POST", "/evaluate/", true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.onload = function () {
        if (xhr.readyState === xhr.DONE) {
          if (xhr.status === 200) {
            var response = JSON.parse(xhr.responseText)
            var Output = document.getElementById("Output")
            var table = getTable(response.predictions)
            for (var i = 0; i<Output.children.length; i++) {
              if (Output.children[i].tagName == 'table' || Output.children[i].tagName == 'TABLE') {Output.removeChild(Output.children[i])}
            }
            Output.appendChild(table);
            document.getElementById("loadtime").innerHTML = "<b>Load Time:</b> "+ response.loadtime+"ms";
            document.getElementById("accuracy").innerHTML = "<b>Accuracy:</b> "+ response.accuracy_top1;
            document.getElementById("avg_inf_speed").innerHTML = "<b>Average Inference Speed:</b> "+ response.avg_inf_speed+"ms";
            document.getElementById("inference_ps").innerHTML = "<b>Inferences Per Second:</b> "+ response.inference_ps;
          }
        }
      };
      xhr.send(JSON.stringify({"data": parsedFiles, "modelType": modelType, "variantType": variantType}));
    }

    async function loadImage(imgFile) {
      return new Promise((resolve, reject) => {
        var reader = new FileReader();
        reader.onload = async e => {
          const image = new Image();
          image.src = e.target.result;
          //- image.setAttribute("crossOrigin", "anonymous");
          image.onload = () => resolve(image);
          image.onerror = reject;
        }
        reader.onerror = reject;
        reader.readAsDataURL(imgFile);
      });
    }

    async function readIndex(filePath) {
      return new Promise((resolve, reject) => {
        var fr=new FileReader();
        var samplesDict = []
        fr.onload=function(){ 
          var samples = fr.result.split("\n")
          for (var i = 0; i < samples.length; i++) {
              var sample = samples[i].split(" ")
              if (sample.length == 2) {
                samplesDict.push({"path": sample[0], "label": parseInt(sample[1])})
              }
          }
          resolve(samplesDict);   
        }
        fr.readAsText(filePath);
      });
    }

    async function parseFiles(files) {
      var fileList = []
      var index = null
      var classNames = null
      
      for (var i = 0; i < files.length; i++) {
        type = files[i].type.split("/")[0]
        if(type == 'image') {
          fileList.push(files[i])
        } else {
          var filename = files[i].webkitRelativePath.split("/")[1]
          if (filename == 'index.txt') {
            var index = files[i]
          } else if (filename == 'class_names.txt') {
            var classNames = files[i]
          }
        }
      }

      var newFiles = Array.from(fileList)
      newFiles.sort(function(a, b) {
        var pathA = a.webkitRelativePath;
        var pathB = b.webkitRelativePath;
        if (pathA < pathB) {
          return -1;
        }
        if (pathA > pathB) {
          return 1;
        }
        return 0;
      })

      var indexData = await readIndex(index)
      indexData.sort(function(a, b) {
        var pathA = a.path;
        var pathB = b.path;
        if (pathA < pathB) {
          return -1;
        }
        if (pathA > pathB) {
          return 1;
        }
        return 0;
      })

      var UriList = []
      for (var i = 0; i < indexData.length; i++ ) {
        var imgData = await loadImage(newFiles[i])
        var obj = {"uri": imgData.src, "label": indexData[i]["label"]}
        UriList.push(obj)
      }

      return UriList
    }

    function getDropDownValue(dropdownId, defaultValue) {
      const dropdown = document.getElementsByName(dropdownId);
      return dropdown[0].value
    }


    function getTable(response) {
      var table = document.createElement('table');
      table.style['width'] = '100%';

      var tr = document.createElement('tr');
      var sampleHeader = document.createElement('th');
      var predLabelHeader = document.createElement('th');
      var origLabelHeader = document.createElement('th');
      var infTimeHeader = document.createElement('th');
      var preprocTimeHeader = document.createElement('th');

      var thborder = '1.5px solid #235a82';
      var thbg = '#a9a9a9';

      sampleHeader.style["border"] = thborder;
      predLabelHeader.style["border"] = thborder;
      origLabelHeader.style["border"] = thborder;
      infTimeHeader.style["border"] = thborder;
      preprocTimeHeader.style["border"] = thborder;

      sampleHeader.style["background-color"] = thbg;
      predLabelHeader.style["background-color"] = thbg;
      origLabelHeader.style["background-color"] = thbg;
      infTimeHeader.style["background-color"] = thbg;
      preprocTimeHeader.style["background-color"] = thbg;

      sampleHeader.appendChild(document.createTextNode("Sample"));
      predLabelHeader.appendChild(document.createTextNode("predLabel"));
      origLabelHeader.appendChild(document.createTextNode("originalLabel"));
      infTimeHeader.appendChild(document.createTextNode("inftime"));
      preprocTimeHeader.appendChild(document.createTextNode("preprocess"));

      tr.appendChild(sampleHeader);
      tr.appendChild(predLabelHeader);
      tr.appendChild(origLabelHeader);
      tr.appendChild(infTimeHeader);
      tr.appendChild(preprocTimeHeader);

      table.appendChild(tr)

      for (var i = 0; i < response.length; i++) {
        var pred = response[i]
        var tr = document.createElement('tr');

        var sample = document.createElement('td');
        var predLabel = document.createElement('td');
        var origLabel = document.createElement('td');
        var infTime = document.createElement('td');
        var preprocTime = document.createElement('td');

        sample.appendChild(document.createTextNode((i+1).toString()));
        predLabel.appendChild(document.createTextNode(pred.predLabel));
        origLabel.appendChild(document.createTextNode(pred.originalLabel));
        infTime.appendChild(document.createTextNode(pred.inftime+"ms"));
        preprocTime.appendChild(document.createTextNode(pred.preprocess+"ms"));

        tr.appendChild(sample);
        tr.appendChild(predLabel);
        tr.appendChild(origLabel);
        tr.appendChild(infTime);
        tr.appendChild(preprocTime);

        table.appendChild(tr);
      }

      return table
    }