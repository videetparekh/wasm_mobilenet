extends layout

block layout-content
  div.View.WelcomeView
    h1.Banner LEIP Evaluate
    div.Message(style="float: left")
      div.Title
        h3 Evaluate Model Performance
      div.form(style="float: left")
        .form-group
          label(for='sample_index') Index
          input#file(type='file',name='sample_index' webkitdirectory multiple)
        .form-group
          label Model Type:
          input(type='radio', name='model_type', id='mobilenetv2', value='mobilenetv2', checked=true)
          label(for='mobilenetv2') MobileNetv2
          input(type='radio', name='model_type', id='tiny', value='tiny')
          label(for='tiny') Tiny Model - Person Classifier
        .form-group
          label Variant Type:
          input(type='radio', name='variant_type', id='baseline', value='baseline', checked=true)
          label(for='baseline') Baseline
          input(type='radio', name='variant_type', id='reimann', value='reimann')
          label(for='reimann') Reimann
          input(type='radio', name='variant_type', id='lorenz_int8', value='lorenz_int8')
          label(for='lorenz_int8') Lorenz Int8
          input(type='radio', name='variant_type', id='lorenz_int16', value='lorenz_int16')
          label(for='lorenz_int16') Lorenz Int16
        span.Details Upload a list of images to classify using MobileNetv2
      div#Output.text()
        p#label()
        p#loadtime()
        p#inferencetime()
    div.NavButtons
      button.NavButton(onclick="leip_eval()") Evaluate

  script.
    async function leip_eval() {
      const files = document.getElementById("file").files;
      const parsedFiles = await parseFiles(files)
      const modelType = getButtonValue('model_type', 'mobilenetv2')
      const variantType = getButtonValue('variant_type', 'baseline')
      var xhr = new XMLHttpRequest();
      xhr.open("POST", "/evaluate/", true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.onload = function () {
        if (xhr.readyState === xhr.DONE) {
          if (xhr.status === 200) {
            var response = JSON.parse(xhr.responseText)
            document.getElementById("Output").style["border"] = '1.5px solid #235a82';
            //- document.getElementById("Output").style["float"] = 'left';
            document.getElementById("label").innerHTML = "<b>Label:</b> "+ response.label;
            document.getElementById("loadtime").innerHTML = "<b>Load Time:</b> "+ response.loadtime+"ms";
            document.getElementById("inferencetime").innerHTML = "<b>Inference Time:</b> "+ response.inftime+"ms";
          }
        }
      };

      //- for (int i=0;i<100;i++) {
        
      //- }
      xhr.send(JSON.stringify({"data": parsedFiles, "modelType": modelType, "variantType": variantType}));
    }




    async function loadImage(imgFile) {
      return new Promise((resolve, reject) => {
        var reader = new FileReader();
        reader.onload = async e => {
          const image = new Image();
          image.src = e.target.result;
          //- image.setAttribute("crossOrigin", "anonymous");
          image.onload = () => resolve(image);
          image.onerror = reject;
        }
        reader.onerror = reject;
        reader.readAsDataURL(imgFile);
      });
    }

    async function readIndex(filePath) {
      return new Promise((resolve, reject) => {
        var fr=new FileReader();
        var samplesDict = []
        fr.onload=function(){ 
          var samples = fr.result.split("\n")
          for (var i = 0; i < samples.length; i++) {
              var sample = samples[i].split(" ")
              if (sample.length == 2) {
                samplesDict.push({"path": sample[0], "label": parseInt(sample[1])})
              }
          }
          resolve(samplesDict);   
        }
        fr.readAsText(filePath);
      });
    }

    async function parseFiles(files) {
      var fileList = []
      var index = null
      var classNames = null
      
      for (var i = 0; i < files.length; i++) {
        type = files[i].type.split("/")[0]
        if(type == 'image') {
          fileList.push(files[i])
        } else {
          var filename = files[i].webkitRelativePath.split("/")[1]
          if (filename == 'index.txt') {
            var index = files[i]
          } else if (filename == 'class_names.txt') {
            var classNames = files[i]
          }
        }
      }

      var newFiles = Array.from(fileList)
      newFiles.sort(function(a, b) {
        var pathA = a.webkitRelativePath;
        var pathB = b.webkitRelativePath;
        if (pathA < pathB) {
          return -1;
        }
        if (pathA > pathB) {
          return 1;
        }
        return 0;
      })

      console.log(newFiles)


      var indexData = await readIndex(index)
      indexData.sort(function(a, b) {
        var pathA = a.path;
        var pathB = b.path;
        if (pathA < pathB) {
          return -1;
        }
        if (pathA > pathB) {
          return 1;
        }
        return 0;
      })

      console.log(indexData)

      var UriList = []
      for (var i = 0; i < indexData.length; i++ ) {
        var imgData = await loadImage(newFiles[i])
        var obj = {"uri": imgData.src, "label": indexData[i]["label"]}
        UriList.push(obj)
      }

      return UriList
    }

    function getButtonValue(buttonId, defaultValue) {
      const Buttons = document.getElementsByName(buttonId);
      var value = defaultValue;
      for (var i = 0; i < Buttons.length; i++) {
        if (Buttons[i].checked) {
          value = Buttons[i].value;
        }
      }

      return value;
    }