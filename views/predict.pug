extends layout

block layout-content
  div.View.WelcomeView
    h1.Banner LEIP Run
    div.Message(style="float: left")
      div.Title
        h3 Classify an Image
      div.form(style="float: left")
        .form-group
          label(for='photo') Photo 
          input#file(type='file',name='photo', accept='image/*')
        .form-group
          label Model Type:
          input(type='radio', name='model_type', id='mobilenetv2', value='mobilenetv2', checked=true)
          label(for='mobilenetv2') MobileNetv2
          input(type='radio', name='model_type', id='tiny', value='tiny')
          label(for='tiny') Tiny Model - Person Classifier
        .form-group
          label Variant Type:
          input(type='radio', name='variant_type', id='baseline', value='baseline', checked=true)
          label(for='baseline') Baseline
          input(type='radio', name='variant_type', id='reimann', value='reimann')
          label(for='reimann') Reimann
          input(type='radio', name='variant_type', id='lorenz_int8', value='lorenz_int8')
          label(for='lorenz_int8') Lorenz Int8
          input(type='radio', name='variant_type', id='lorenz_int16', value='lorenz_int16')
          label(for='lorenz_int16') Lorenz Int16
        span.Details Upload an image to classify using MobileNetv2
      div#Output.text()
        p#label()
        p#loadtime()
        p#inferencetime()
    div.NavButtons
      button.NavButton(onclick="predict()") Predict

  script.
    async function predict() {
      const imageURL = document.getElementById("file").files[0];
      const modelType = getButtonValue('model_type', 'mobilenetv2')
      const variantType = getButtonValue('variant_type', 'baseline')

      const image = await loadImage(imageURL);
      var xhr = new XMLHttpRequest();
      xhr.open("POST", "/predict/", true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.onload = function () {
        if (xhr.readyState === xhr.DONE) {
          if (xhr.status === 200) {
            var response = JSON.parse(xhr.responseText)
            var Output = document.getElementById("Output");
            Output.style["border"] = '1.5px solid #235a82';
            for (var i = 0; i<Output.children.length; i++) {
              if (Output.children[i].tagName == 'canvas' || Output.children[i].tagName == 'CANVAS') {Output.removeChild(Output.children[i])}
            }
            var canv = createCanvas(image);
            Output.prepend(canv);
            document.getElementById("label").innerHTML = "<b>Label:</b> "+ response.label;
            document.getElementById("loadtime").innerHTML = "<b>Load Time:</b> "+ parseFloat(response.loadtime).toFixed(2).toString()+"ms";
            document.getElementById("inferencetime").innerHTML = "<b>Inference Time:</b> "+ parseFloat(response.inftime).toFixed(2).toString()+"ms";
          }
        }
      };

      xhr.send(JSON.stringify({"image": image.src, "modelType": modelType, "variantType": variantType}));
    }

    async function loadImage(imgFile) {
      return new Promise((resolve, reject) => {
        var reader = new FileReader();
        reader.onload = async e => {
          const image = new Image();
          image.src = e.target.result;
          //- image.setAttribute("crossOrigin", "anonymous");
          image.onload = () => resolve(image);
          image.onerror = reject;
        }
        reader.onerror = reject;
        reader.readAsDataURL(imgFile);
      });
    }
    
    function getButtonValue(buttonId, default_value) {
      const Buttons = document.getElementsByName(buttonId);
      var value = default_value;
      for (var i = 0; i < Buttons.length; i++) {
        if (Buttons[i].checked) {
          value = Buttons[i].value;
        }
      }

      return value;
    }

    function createCanvas(image) {
      var canv = document.createElement('canvas');
      canv.style["margin-left"] = "auto";
      canv.style["margin-right"] = "auto";
      canv.style["display"] = "block";
      canv.width = '150';
      canv.height= '150';
      const sourceWidth = image.width;
      const sourceHeight = image.height;
      const shortEdge = Math.min(image.width, image.height);
      const yy = Math.floor((sourceHeight - shortEdge) / 2);
      const xx = Math.floor((sourceWidth - shortEdge) / 2);
      const imageCanvasContext = canv.getContext("2d");
      imageCanvasContext.drawImage(
          image,
          xx,
          yy,
          shortEdge,
          shortEdge,
          0,
          0,
          150,
          150
        );
      return canv;
    }